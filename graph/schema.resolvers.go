package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"expense/graph/model"
	"expense/pkg/graphModels/expense"
	"expense/pkg/graphModels/user"
	"fmt"
	"strconv"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	//panic(fmt.Errorf("not implemented: CreateUser - createUser"))
	userId, err := user.InsertUser(input.Name, input.Email, input.Password)
	if err != nil {
		return nil, err
	}
	return &model.User{ID: strconv.Itoa(userId), Name: input.Name, Email: input.Email, Password: input.Password}, nil
}

// AddExpense is the resolver for the addExpense field.
func (r *mutationResolver) AddExpense(ctx context.Context, input model.NewExpense) (*model.Expense, error) {
	//panic(fmt.Errorf("not implemented: AddExpense - addExpense"))
	expenseId, err := expense.AddExpense(input.UserID, input.Note, input.Amount, input.Title, input.Date, input.Status)
	if err != nil {
		return nil, err
	}
	return &model.Expense{
		ID:     strconv.Itoa(expenseId),
		UserID: input.UserID,
		Note:   input.Note,
		Amount: input.Amount,
		Title:  input.Title,
		Date:   input.Date,
		Status: input.Status,
	}, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
